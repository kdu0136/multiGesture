// Generated by view binder compiler. Do not edit!
package kim.dongun.viewZoom.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.FrameLayout;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import com.yalantis.ucrop.view.UCropView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;
import kim.dongun.viewZoom.R;

public final class UcropFragmentPhotoboxBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final FrameLayout controlsWrapper;

  @NonNull
  public final ImageView imageViewLogo;

  @NonNull
  public final UCropView ucrop;

  @NonNull
  public final FrameLayout ucropFrame;

  @NonNull
  public final RelativeLayout ucropPhotobox;

  private UcropFragmentPhotoboxBinding(@NonNull RelativeLayout rootView,
      @NonNull FrameLayout controlsWrapper, @NonNull ImageView imageViewLogo,
      @NonNull UCropView ucrop, @NonNull FrameLayout ucropFrame,
      @NonNull RelativeLayout ucropPhotobox) {
    this.rootView = rootView;
    this.controlsWrapper = controlsWrapper;
    this.imageViewLogo = imageViewLogo;
    this.ucrop = ucrop;
    this.ucropFrame = ucropFrame;
    this.ucropPhotobox = ucropPhotobox;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static UcropFragmentPhotoboxBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static UcropFragmentPhotoboxBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.ucrop_fragment_photobox, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static UcropFragmentPhotoboxBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.controls_wrapper;
      FrameLayout controlsWrapper = rootView.findViewById(id);
      if (controlsWrapper == null) {
        break missingId;
      }

      id = R.id.image_view_logo;
      ImageView imageViewLogo = rootView.findViewById(id);
      if (imageViewLogo == null) {
        break missingId;
      }

      id = R.id.ucrop;
      UCropView ucrop = rootView.findViewById(id);
      if (ucrop == null) {
        break missingId;
      }

      id = R.id.ucrop_frame;
      FrameLayout ucropFrame = rootView.findViewById(id);
      if (ucropFrame == null) {
        break missingId;
      }

      RelativeLayout ucropPhotobox = (RelativeLayout) rootView;

      return new UcropFragmentPhotoboxBinding((RelativeLayout) rootView, controlsWrapper,
          imageViewLogo, ucrop, ucropFrame, ucropPhotobox);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
